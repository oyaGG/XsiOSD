# CommandXsiOSDPlugin
# Initial code generated by Softimage SDK Wizard
# Executed Sun Apr 19 23:12:46 UTC+0500 2015 by Philipp
# 
# Tip: To add a command to this plug-in, right-click in the 
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client import constants as c


null = None
false = 0
true = 1


optType = ["Bilinear", 0, "Catmark", 1]
optBoundaryArray = ["Do not interpolate boundaries", 0, "Sharpen edges", 1, "Sharpen edges and corners", 2]
optTriangle = ["Catmark weights", 0, "Smooth triangle weights", 1]
optFVar = ["Smooth everywhere", 0, "Sharpen corners only", 1, "Edge corner", 2, "Edge and corner + propagate corner", 3, "Sharpen all boundaries", 4, "Bilinear interpolation", 5]
optCrease = ["Catmark rule", 0, "Chaikin rule", 1]

def XSILoadPlugin( in_reg ):
	in_reg.Author = "Angel 07"
	in_reg.Name = "CommandXsiOSDPlugin"
	in_reg.Major = 1
	in_reg.Minor = 0

	in_reg.RegisterCommand("CommandXsiOSD","CommandXsiOSD")
	in_reg.RegisterCommand("CommandXsiOSDProcess","CommandXsiOSDProcess")

	in_reg.RegisterProperty("OSDProperty")

	in_reg.RegisterMenu(c.siMenuTbModelCreatePolygonMeshID, "XsiOSDProcess_menu", False, False)
	in_reg.RegisterMenu(c.siMenuTbModelModifyPolygonMeshID, "XsiOSD_menu", False, False)
	#RegistrationInsertionPoint - do not remove this line

	return true

def XSIUnloadPlugin( in_reg ):
	strPluginName = in_reg.Name
	Application.LogMessage(str(strPluginName) + str(" has been unloaded."),c.siVerbose)
	return true

def CommandXsiOSD_Init( in_ctxt ):
	oCmd = in_ctxt.Source
	oCmd.Description = ""
	oCmd.ReturnValue = true

	return true

def CommandXsiOSDProcess_Init( in_ctxt ):
	oCmd = in_ctxt.Source
	oCmd.Description = ""
	oCmd.ReturnValue = true

	return true

def XsiOSDProcess_menu_Init(in_ctxt):
	menu = in_ctxt.source
	menu.AddCommandItem("Apply XsiOSD", "CommandXsiOSDProcess")

def XsiOSD_menu_Init(in_ctxt):
	menu = in_ctxt.source
	menu.AddCommandItem("Apply XsiOSD operator", "CommandXsiOSD")

def OSDProperty_Define( in_ctxt ):
	oProp = in_ctxt.Source
	oProp.AddParameter3("SubdivCount", c.siInt2, 1, 1, 10, True, False)
	oProp.AddParameter3("isUV", c.siBool, 0, "", "", True, False)

	oProp.AddParameter3("optType", c.siInt2, 1, 0, 1, True, False)
	oProp.AddParameter3("optBoundary", c.siInt2, 1, 0, 2, True, False)
	oProp.AddParameter3("optTriangle", c.siInt2, 0, 0, 1, True, False)
	oProp.AddParameter3("optFVar", c.siInt2, 0, 0, 5, True, False)
	oProp.AddParameter3("optCrease", c.siInt2, 0, 0, 1, True, False)
	return true

def OSDProperty_DefineLayout( in_ctxt ):
	return True

def OSDPropertyBuildUI():
	oProp = PPG.Inspected(0)
	oLayout = PPG.PPGLayout
	oLayout.Clear()
	oLayout.AddItem("SubdivCount", "Subdivision steps")
	oLayout.AddItem("isUV", "Subdivide UV")

	oLayout.AddGroup("Subdivision options")
	oLayout.AddEnumControl("optType", optType, "Subdivision scheme")
	oLayout.AddEnumControl("optBoundary", optBoundaryArray, "Boundary interpolation")
	oLayout.AddEnumControl("optTriangle", optTriangle, "Triangle subdivision")
	oLayout.AddEnumControl("optFVar", optFVar, "FVar linear interpolation")
	oLayout.AddEnumControl("optCrease", optCrease, "Creasing method")
	oLayout.EndGroup()

	#oLayout.AddGroup("", False)
	oLayout.AddRow()
	oItem = oLayout.AddButton("DeleteHiRes", "Delete Hi-res clone")
	oItem.SetAttribute(c.siUICX, 120)
	oItem.SetAttribute(c.siUIWidthPercentage, 100)
	oItem.SetAttribute(c.siUICY, 25)

	oItem = oLayout.AddButton("DeleteLowRes", "Delete Low-res source")
	oItem.SetAttribute(c.siUICX, 120)
	oItem.SetAttribute(c.siUIWidthPercentage, 100)
	oItem.SetAttribute(c.siUICY, 25)

	oItem = oLayout.AddButton("Disconnect", "Disconnect")
	oItem.SetAttribute(c.siUICX, 70)
	oItem.SetAttribute(c.siUIWidthPercentage, 100)
	oItem.SetAttribute(c.siUICY, 25)
	#oLayout.EndGroup()
	oLayout.EndRow()
	PPG.Refresh()

def OSDProperty_Disconnect_OnClicked():
	oProp = PPG.Inspected(0)
	parent = oProp.Parent
	target = parent.FindChildren(parent.FullName + "_OSD", c.siPolyMeshType)
	if len(target) > 0:
		targetO = target[0]
		if not targetO == None:
			Application.FreezeObj(targetO.FullName + ".polymsh.copyop", "", "")
			Application.CopyPaste(targetO, "", parent.Parent, 1)
			Application.SetValue(targetO.FullName + ".visibility.selectability", True, "")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.SubdivisionSteps.Expression")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.isUV.Expression")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.optBoundary.Expression")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.optTriangle.Expression")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.optFVar.Expression")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.optCrease.Expression")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.optType.Expression")

			Application.SetValue(parent.FullName + ".visibility.rendvis", True, "")
			Application.SetValue(parent.FullName + ".display.staticsel", 8, "")
			Application.SetValue(parent.FullName + ".display.intsel", 8, "")
			Application.SetValue(parent.FullName + ".display.playbacksel", 8, "")
			Application.SetValue(parent.FullName + ".display.staticunselnear", 8, "")
			Application.SetValue(parent.FullName + ".display.intunselnear", 8, "")
			Application.SetValue(parent.FullName + ".display.playbackunselnear", 8, "")
			Application.SetValue(parent.FullName + ".display.staticunselfar", 8, "")
			Application.SetValue(parent.FullName + ".display.intunselfar", 8, "")
			Application.SetValue(parent.FullName + ".display.playbackunselfar", 8, "")

def OSDProperty_DeleteHiRes_OnClicked():

	oProp = PPG.Inspected(0)
	parent = oProp.Parent
	target = parent.FindChildren(parent.FullName + "_OSD", c.siPolyMeshType)
	if len(target) > 0:
		targetO = target[0]
		if not targetO == None:
			#Application.LogMessage("Click delete Hi-res")
			#Application.LogMessage("Parent = " + parent.FullName + " target = " + targetO.FullName)
			Application.DeleteObj(targetO)
			Application.SetValue(parent.FullName + ".visibility.rendvis", True, "")
			Application.SetValue(parent.FullName + ".display.staticsel", 8, "")
			Application.SetValue(parent.FullName + ".display.intsel", 8, "")
			Application.SetValue(parent.FullName + ".display.playbacksel", 8, "")
			Application.SetValue(parent.FullName + ".display.staticunselnear", 8, "")
			Application.SetValue(parent.FullName + ".display.intunselnear", 8, "")
			Application.SetValue(parent.FullName + ".display.playbackunselnear", 8, "")
			Application.SetValue(parent.FullName + ".display.staticunselfar", 8, "")
			Application.SetValue(parent.FullName + ".display.intunselfar", 8, "")
			Application.SetValue(parent.FullName + ".display.playbackunselfar", 8, "")


def OSDProperty_DeleteLowRes_OnClicked():

	oProp = PPG.Inspected(0)
	#Application.LogMessage("Click delete Low-res")
	parent = oProp.Parent
	target = parent.FindChildren(parent.FullName + "_OSD", c.siPolyMeshType)
	if len(target) > 0:
		targetO = target[0]
		if not targetO == None:
			Application.FreezeObj(targetO.FullName + ".polymsh.copyop", "", "")
			Application.CopyPaste(targetO, "", parent.Parent, 1)
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.SubdivisionSteps.Expression")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.isUV.Expression")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.optBoundary.Expression")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.optTriangle.Expression")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.optFVar.Expression")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.optCrease.Expression")
			Application.DeleteObj(targetO.FullName + ".polymsh.XsiOSD.Parameters.optType.Expression")
			Application.DeleteObj(parent)
			Application.SetValue(targetO.FullName + ".visibility.selectability", True, "")

def OSDProperty_OnInit( ):
	OSDPropertyBuildUI()
	return

def CommandXsiOSD_Execute(  ):

	Application.LogMessage("CommandXsiOSD_Execute called",c.siVerbose)
	# 
	# TODO: Put your command implementation here.
	# 
	selection = Application.Selection
	#Find the number of selected polymeshes
	num = 0
	for o in selection:
		if o.Type == "polymsh":
			num = num + 1
	if num > 0:
		Application.ApplyXsiOSD()
		for o in selection:
			if o.Type == "polymsh":
				op = Application.GetValue(o.FullName + ".polymsh.XsiOSD")
				Application.InspectObj(op)

	else:
		Application.LogMessage("Select anything")


	return true

def CreateObjectOSD(o):
	
	clones = Application.Clone(o, "", 1)
	clone = clones[0]
	
	Application.SetValue(clone.Name + ".Name", o.Name + "_OSD", "")
	Application.CopyPaste(clone, "", o, 1)
	Application.ApplyXsiOSD()
	if o.GetPropertyFromName2("OSDProperty"):
		prop = o.GetPropertyFromName2("OSDProperty")
		Application.SetValue(o.FullName + ".OSDProperty.SubdivCount", 1, "")
	else:
		prop = o.AddProperty("OSDProperty")
	op = Application.GetValue(clone.FullName + ".polymsh.XsiOSD")
	op.Parameters("SubdivisionSteps").AddExpression(o.FullName + ".OSDProperty.SubdivCount")
	op.Parameters("isUpdate").Value =True
	op.Parameters("isUV").AddExpression(o.FullName + ".OSDProperty.isUV")
	op.Parameters("optType").AddExpression(o.FullName + ".OSDProperty.optType")
	op.Parameters("optBoundary").AddExpression(o.FullName + ".OSDProperty.optBoundary")
	op.Parameters("optTriangle").AddExpression(o.FullName + ".OSDProperty.optTriangle")
	op.Parameters("optFVar").AddExpression(o.FullName + ".OSDProperty.optFVar")
	op.Parameters("optCrease").AddExpression(o.FullName + ".OSDProperty.optCrease")

	Application.InspectObj(prop)
	Application.SetValue(clone.FullName + ".visibility.selectability", False, "")
	Application.SetValue(o.FullName + ".visibility.rendvis", False, "")
	Application.MakeLocal(o.FullName + ".display", "siDefaultPropagation")
	Application.SetValue(o.FullName + ".display.staticsel", 0, "")
	Application.SetValue(o.FullName + ".display.intsel", 0, "")
	Application.SetValue(o.FullName + ".display.playbacksel", 0, "")
	Application.SetValue(o.FullName + ".display.staticunselnear", 0, "")
	Application.SetValue(o.FullName + ".display.intunselnear", 0, "")
	Application.SetValue(o.FullName + ".display.playbackunselnear", 0, "")
	Application.SetValue(o.FullName + ".display.staticunselfar", 0, "")
	Application.SetValue(o.FullName + ".display.intunselfar", 0, "")
	Application.SetValue(o.FullName + ".display.playbackunselfar", 0, "")

	camOb = Application.GetValue("Camera")
	if not camOb == None:
		Application.SetValue("Camera.camdisp.mixviewmode", True, "")

def CommandXsiOSDProcess_Execute(  ):

	Application.LogMessage("CommandXsiOSDProcess_Execute called",c.siVerbose)
	# 
	# TODO: Put your command implementation here.
	# 
	selection = Application.Selection
	selStr = ""
	for s in selection:
		selStr = selStr + s.FullName + ", "
	selStr = selStr[:-2]
	for oSel in selection:
		if oSel.Type == "polymsh":
			CreateObjectOSD(oSel)
	
	Application.SelectObj(selStr)


	return true

